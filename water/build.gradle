plugins {
    id 'org.jetbrains.kotlin.multiplatform'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'com.codingfeline.buildkonfig'
}

import com.codingfeline.buildkonfig.gradle.TargetConfigDsl

group = 'com.cliabhach.terrapin'
version = '1.0'


kotlin {
    jvm {
        compilations.all {
            kotlinOptions.jvmTarget = '14'
        }
        withJava()
        testRuns["test"].executionTask.configure {
            useJUnitPlatform()
        }
    }
    js(IR) {
        browser {
            commonWebpackConfig {
                cssSupport.enabled = true
            }
            // TODO: Figure out why 'distribution' DSL block isn't supported
            // For now, output is in ../build/js/ (NOT /water/build/js/)
        }
        // Even though we only use the IR as a library, this
        // has to be 'executable' for other modules' npm/yarn
        // import to work.
        binaries.executable()
    }
    def hostOs = System.getProperty("os.name")
    def isMingwX64 = hostOs.startsWith("Windows")
    def nativeTarget
    if (hostOs == "Mac OS X") nativeTarget = macosX64('native')
    else if (hostOs == "Linux") nativeTarget = linuxX64("native")
    else if (isMingwX64) nativeTarget = mingwX64("native")
    else throw new GradleException("Host OS is not supported in Kotlin/Native.")


    sourceSets {
        all {
            languageSettings {
                // Required for TS definition files
                optIn('kotlin.js.ExperimentalJsExport')
            }
        }
        commonMain {
            dependencies {
                implementation 'io.ktor:ktor-client-core:1.6.7'
                implementation 'io.ktor:ktor-client-logging:1.6.7'
                implementation 'io.ktor:ktor-client-serialization:1.6.7'
                api 'io.insert-koin:koin-core:3.1.5'
            }
        }
        commonTest {
            dependencies {
                // Commented out as per https://youtrack.jetbrains.com/issue/KTIJ-16821 and
                // https://kotlinlang.org/docs/gradle.html#set-dependencies-on-test-libraries .
                //
                // Shame that the type inference for JetBrains' 'kotlin()' function is so bad.
                //implementation kotlin('test')
            }
        }
        jvmMain {
            dependencies {
                implementation 'io.ktor:ktor-client-java:1.6.7'
                implementation 'io.ktor:ktor-client-logging-jvm:1.6.7'
                api 'io.insert-koin:koin-ktor:3.1.5'
            }
        }
        jvmTest {

        }
        jsMain {
            dependencies {
                implementation "io.ktor:ktor-client-js:1.6.7"
            }
        }
        jsTest {

        }
        nativeMain {
            dependencies {
                implementation "io.ktor:ktor-client-curl:1.6.7"
            }
        }
        nativeTest {

        }
    }
}

final String apiKeyKey = 'terrapin.mdbApiKey'

Properties local = new Properties()
project.file('local.properties').withInputStream(local::load)

buildkonfig {
    packageName = "${group}.top"
    // Groovy cannot tell that there is both a property ('defaultConfigs', a map) and
    // a method ('defaultConfigs(Action)') defined in the BuildKonfigExtension class.
    //
    // For that reason we disable the inspection here.
    //
    //noinspection GroovyAssignabilityCheck
    defaultConfigs { TargetConfigDsl conf ->
        String movieDbApiKey = local[apiKeyKey]
        if (movieDbApiKey == null || movieDbApiKey.isEmpty()) {
            logger.error(
                    """
The gradle build for ${project.name} cannot find a string value with the
key `$apiKeyKey`. Please ensure this is present in a local.properties
file in that project directory; do not commit the local.properties file
into source control.
"""
            )
        } else {
            // The first parameter to 'buildConfigField' is supposed to be a
            // `com.codingfeline.buildkonfig.compiler.FieldSpec.Type`, but that class
            // isn't available to the lint checker.
            //
            // For that reason we disable the inspection here.
            //
            //noinspection GroovyAssignabilityCheck
            conf.buildConfigField 'STRING', 'MDB_API_KEY', movieDbApiKey
        }
    }
}

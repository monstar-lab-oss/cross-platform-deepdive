##
# Default config for Kotlin:
#
# Official code style (not the best, but it'll do...)
kotlin.code.style=official
####
# The below two options ('enableGranularSourceSetsMetadata' and
# 'enableDependencyPropagation') are automatically set to the values
# we want by Kotlin 1.6.20-M1 and higher. They may be removed once
# 1. the final release of 1.6.20 comes out and
# 2. we can be certain that they should not be uncommented again
#
# Turn on support for 'hierarchical' sources, which lets us share some
# properties between sources (the docs have an example where one 'ios'
# set is shared between 'iosArm64' and 'iosX64'). Seems pretty similar
# to the classic per-feature support that Android source sets have.
#kotlin.mpp.enableGranularSourceSetsMetadata=true
# To make 'enableGranularSourceSetsMetadata' actually work, we have to
# turn off the alternative dependency behavior. Big thanks to
# https://kotlinlang.org/docs/migrating-multiplatform-project-to-14.html
# for explaining all this.
#kotlin.native.enableDependencyPropagation=false
####
# We have to turn this on while we're using the cool new IR mode for
# javascript code. That way, we can control whether the javascript files
# are directly executable by adding a 'binaries.executable()' call to
# specific build.gradle configs. More details at
# https://kotlinlang.org/docs/js-ir-compiler.html and
# https://kotlinlang.org/docs/js-project-setup.html#execution-environments
kotlin.js.generate.executable.default=false
